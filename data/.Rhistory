size_u=n/U
size_i=m/I
occup=rep(1:U,each=size_u)	#Input: userID, Return: Occupation
genre=rep(1:I,each=size_i)	#Input: itemID, Return: Genre
S=15#Specify the number of replications
K=Ktrue
s=11
f = 1
# sin
mu_ug = c(1,2)
mu_ig = c(1,2)
sig_u = diag(f)
sig_i = diag(f)
while(s<S+1){
set.seed(111+s)
h1 = 5
h2 = 3
## 1-5
# W1 = mvrnorm(n=2, mu=c(1, 1, 0.5, 0.5, -0.8), Sigma=diag(h1)/10, tol = 1e-6, empirical = FALSE)
# W2 = mvrnorm(n=5, mu=c(1, 1, 0.5), Sigma=diag(h2), tol = 1e-6, empirical = FALSE)
#6-10 sig_w2=1 11-15 sig_w2 = 10
W1 = mvrnorm(n=2, mu=c(1, 0.8, 0.5, 0.5, -1), Sigma=diag(h1)/10, tol = 1e-6, empirical = FALSE)
W2 = mvrnorm(n=5, mu=c(1, 0.8, 0), Sigma=diag(h2)*10, tol = 1e-6, empirical = FALSE)
P = rep(0, f)
for (i in 1:U){
#p = rnorm(size_u , mean=mu_ug[i], sd=0.01)
p = mvrnorm(n = size_u , mu=mu_ug[i], Sigma=sig_u, tol = 1e-6, empirical = FALSE)
P = rbind(P, abs(p))
}
P = P[-1]
Q = rep(0, f)
for (i in 1:I){
#q = rnorm(size_i, mean=mu_ig[i], sd=0.01)
q = mvrnorm(n = size_i, mu=mu_ig[i], Sigma=sig_i, tol = 1e-6, empirical = FALSE)
Q = rbind(Q, abs(q))
}
Q = Q[-1]
#b = rnorm(n = n, mean=0, sd=1)
# # #
#generating missing pattern
J=n*m*0.2 #Specify (1-missing.rate)
full.data=NULL
full.data=foreach(j=1:J,.combine='cbind') %dopar%{
generate.rating.mcar.random(full.data,P,Q,W1,W2)
}
full.data=as.big.matrix(t(full.data))
colnames(full.data) = c('user_id', 'item_id', 'rating')
save_path = paste('ran3/full.data', 888+s,'.csv', sep='')
write.csv(full.data[], save_path, row.names=FALSE)
s = s+1
}
#rating=(P[u]*Q[i])**2/3+b[u]+rnorm(1,0,0.1)
#rating=sin((P[u]*Q[i])+b[u])*5+rnorm(1,0,0.1)
for (i in 11:15){
path = paste('ran3/full.data', 888+i,'.csv', sep='')
dt = read.csv(path, header=TRUE)
hist(dt$rating)
}
sample(1:50, 10, replace=FALSE)
ordered(sample(1:100, 20, replace=FALSE))
seq(-3,3,by=1.5)
1//2
1/2
seil(1/2)
ceil(1/2)
ceilling(1/2)
ceiling(1/2)
rm(list=ls())
setwd("~/Documents/Research/2020W/RS/code")
library(MASS)
library(doParallel)
library(foreach)
library(bigmemory)
library(bigalgebra)
library(Rcpp)
library(RcppArmadillo)
#cl=detectCores()
cl=16
registerDoParallel(cores = cl)
getDoParWorkers()
source("subfunctions for simulation.R")
sourceCpp('RcppArmadillosample.cpp')
source('subfunctions for Rcpp.R')
setwd("~/Documents/Research/2020W/DeepRec-master/data/")
#basic settings
n=1000
m=1000
B=5	#the number of user clusters
C=5	#the number of item clusters
Ktrue=3
user.clustersize=n/B
item.clustersize=m/C
occup=rep(1:B,each=user.clustersize)	#Input: userID, Return: Occupation
genre=rep(1:C,each=item.clustersize)	#Input: itemID, Return: Genre
Bhat=B
Chat=C
S=1#Specify the number of replications
K=Ktrue
s=1
while(s<S+1){
set.seed(888+s)
P0=big.matrix(n/50,Ktrue)
P0[,]=matrix(rnorm(n/50*Ktrue,0,1),n,Ktrue)
P = big.matrix(n, Ktrue)
for (i in 1:n){
i0 = ceiling(i/50)
P[i,] = mvrnorm(n = 1 , mu=P0[i0,], Sigma=diag(Ktrue)/100, tol = 1e-6, empirical = FALSE)
}
Q=big.matrix(m,Ktrue)
Q[,]=matrix(rnorm(m*Ktrue,0,1),m,Ktrue)
O=big.matrix(B,Ktrue)
O[,]=seq(-3,3,by=1.5)%*%t(rep(1,Ktrue))
G=big.matrix(C,Ktrue)
G[,]=seq(-3,3,by=1.5)%*%t(rep(1,Ktrue))
# # #
#generating missing pattern
J=n*m*0.2 #Specify (1-missing.rate)
full.data=NULL
full.data=foreach(j=1:J,.combine='cbind') %dopar%{
generate.rating.mcar(full.data,P,Q,O,G)
}
full.data=as.big.matrix(t(full.data))
colnames(full.data) = c('user_id', 'item_id', 'rating')
#full.data[, 3] = exp(-abs(full.data[, 3])) # for data2
save_path = paste('weighted/full.data', 888+s,'.csv', sep='')
write.csv(full.data[], save_path, row.names=FALSE)
s = s+1
}
rm(list=ls())
setwd("~/Documents/Research/2020W/RS/code")
library(MASS)
library(doParallel)
library(foreach)
library(bigmemory)
library(bigalgebra)
library(Rcpp)
library(RcppArmadillo)
#cl=detectCores()
cl=16
registerDoParallel(cores = cl)
getDoParWorkers()
source("subfunctions for simulation.R")
sourceCpp('RcppArmadillosample.cpp')
source('subfunctions for Rcpp.R')
setwd("~/Documents/Research/2020W/DeepRec-master/data/")
#basic settings
n=1000
m=1000
B=5	#the number of user clusters
C=5	#the number of item clusters
Ktrue=3
user.clustersize=n/B
item.clustersize=m/C
occup=rep(1:B,each=user.clustersize)	#Input: userID, Return: Occupation
genre=rep(1:C,each=item.clustersize)	#Input: itemID, Return: Genre
Bhat=B
Chat=C
S=1#Specify the number of replications
K=Ktrue
s=1
while(s<S+1){
set.seed(888+s)
P0=big.matrix(n/50,Ktrue)
P0[,]=matrix(rnorm(n/50*Ktrue,0,1),n/50,Ktrue)
P = big.matrix(n, Ktrue)
for (i in 1:n){
i0 = ceiling(i/50)
P[i,] = mvrnorm(n = 1 , mu=P0[i0,], Sigma=diag(Ktrue)/100, tol = 1e-6, empirical = FALSE)
}
Q=big.matrix(m,Ktrue)
Q[,]=matrix(rnorm(m*Ktrue,0,1),m,Ktrue)
O=big.matrix(B,Ktrue)
O[,]=seq(-3,3,by=1.5)%*%t(rep(1,Ktrue))
G=big.matrix(C,Ktrue)
G[,]=seq(-3,3,by=1.5)%*%t(rep(1,Ktrue))
# # #
#generating missing pattern
J=n*m*0.2 #Specify (1-missing.rate)
full.data=NULL
full.data=foreach(j=1:J,.combine='cbind') %dopar%{
generate.rating.mcar(full.data,P,Q,O,G)
}
full.data=as.big.matrix(t(full.data))
colnames(full.data) = c('user_id', 'item_id', 'rating')
#full.data[, 3] = exp(-abs(full.data[, 3])) # for data2
save_path = paste('weighted/full.data', 888+s,'.csv', sep='')
write.csv(full.data[], save_path, row.names=FALSE)
s = s+1
}
data = read.csv('weighted/full.data889.csv', header=TRUE)
summary(data)
setwd("~/Documents/Research/2020W/DeepRec-master/test/ran3")
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_ran3_K50_n50_lr0.0001_reg100_test.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_ran3_K50_n50_lr0.0001_reg10_test.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.U_test_IAutoRec_filled_new_ran3_U_h500_n50_lr0.00005_r100.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.U_test_IAutoRec_filled_new_ran3_L500_200_500_50n_lr0.00005_reg500_test.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
rm(list=ls())
setwd("~/Documents/Research/2020W/RS/code")
library(MASS)
library(doParallel)
library(foreach)
library(bigmemory)
library(bigalgebra)
library(Rcpp)
library(RcppArmadillo)
#cl=detectCores()
cl=16
registerDoParallel(cores = cl)
getDoParWorkers()
source("subfunctions for simulation.R")
sourceCpp('RcppArmadillosample.cpp')
source('subfunctions for Rcpp.R')
setwd("~/Documents/Research/2020W/DeepRec-master/data/")
#basic settings
n=1000
m=1000
B=5	#the number of user clusters
C=5	#the number of item clusters
Ktrue=3
user.clustersize=n/B
item.clustersize=m/C
occup=rep(1:B,each=user.clustersize)	#Input: userID, Return: Occupation
genre=rep(1:C,each=item.clustersize)	#Input: itemID, Return: Genre
Bhat=B
Chat=C
S=10#Specify the number of replications
K=Ktrue
s=2
while(s<S+1){
set.seed(888+s)
P0=big.matrix(n/50,Ktrue)
P0[,]=matrix(rnorm(n/50*Ktrue,0,1),n/50,Ktrue)
P = big.matrix(n, Ktrue)
for (i in 1:n){
i0 = ceiling(i/50)
P[i,] = mvrnorm(n = 1 , mu=P0[i0,], Sigma=diag(Ktrue)/100, tol = 1e-6, empirical = FALSE)
}
Q=big.matrix(m,Ktrue)
Q[,]=matrix(rnorm(m*Ktrue,0,1),m,Ktrue)
O=big.matrix(B,Ktrue)
O[,]=seq(-3,3,by=1.5)%*%t(rep(1,Ktrue))
G=big.matrix(C,Ktrue)
G[,]=seq(-3,3,by=1.5)%*%t(rep(1,Ktrue))
# # #
#generating missing pattern
J=n*m*0.2 #Specify (1-missing.rate)
full.data=NULL
full.data=foreach(j=1:J,.combine='cbind') %dopar%{
generate.rating.mcar(full.data,P,Q,O,G)
}
full.data=as.big.matrix(t(full.data))
colnames(full.data) = c('user_id', 'item_id', 'rating')
#full.data[, 3] = exp(-abs(full.data[, 3])) # for data2
save_path = paste('weighted/full.data', 888+s,'.csv', sep='')
write.csv(full.data[], save_path, row.names=FALSE)
s = s+1
}
setwd("~/Documents/Research/2020W/DeepRec-master/test/weighted")
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K50_n50_lr0.0005_reg1_BS512.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K50_n50_lr0.0005_reg1_1.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K50_n50_lr0.0005_reg1_BS512 copy.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K50_n50_lr0.0005_reg0.1_1.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K50_n50_lr0.0005_reg1_1.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K50_n50_lr0.0005_reg0.001_BS512.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K500_n50_lr0.0005_reg0.1_BS512.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K500_n50_lr0.0005_reg0.001_BS512.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K500_n50_lr0.0005_reg0.00001_BS512.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.U_test_IAutoRec_filled_new_weighted_U_h500_n50_lr0.005_r50.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.U_test_IAutoRec_filled_new_weighted_U_h500_n50_lr0.005_r50_group.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K3_n50_lr0.0005_reg0.1_1.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K3_n50_lr0.0005_reg0.001_BS512.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K500_n50_lr0.0005_reg1_BS512.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
data = read.csv('weighted/full.data889.csv', header=TRUE)
setwd("~/Documents/Research/2020W/DeepRec-master/data/")
data = read.csv('weighted/full.data889.csv', header=TRUE)
summary(data)
hist(data$rating)
for (i in 1:10){
path = paste('weighted/full.data', 888+i,'.csv', sep='')
dt = read.csv(path, header=TRUE)
hist(dt$rating)
}
setwd("~/Documents/Research/2020W/DeepRec-master/test/weighted")
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K3_n50_lr0.0005_reg0.1_u20.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K3_n50_lr0.0005_reg0.1_u20.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K3_n50_lr0.0005_reg0.5_u20.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K50_n50_lr0.0005_reg0.1_long.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K6_n50_lr0.0005_reg1_u5.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K6_n50_lr0.0005_reg0.1_u5.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
setwd("~/Documents/Research/2020W/DeepRec-master/data/")
for (i in 1:10){
path = paste('simulation/full.data', 888+i,'.csv', sep='')
dt = read.csv(path, header=TRUE)
hist(dt$rating)
}
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K6_n50_lr0.0005_reg0.1_u5.txt', sep = " ", header=FALSE)
setwd("~/Documents/Research/2020W/DeepRec-master/test/weighted")
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K6_n50_lr0.0005_reg0.1_u5.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K6_n50_lr0.0005_reg0.1_u5.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K6_n50_lr0.0005_reg1_u5.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
rm(list=ls())
setwd("~/Documents/Research/2020W/RS/code")
library(MASS)
library(doParallel)
library(foreach)
library(bigmemory)
library(bigalgebra)
library(Rcpp)
library(RcppArmadillo)
#cl=detectCores()
cl=16
registerDoParallel(cores = cl)
getDoParWorkers()
source("subfunctions for simulation.R")
sourceCpp('RcppArmadillosample.cpp')
source('subfunctions for Rcpp.R')
setwd("~/Documents/Research/2020W/DeepRec-master/data/")
#basic settings
n=1000
m=1000
B=5	#the number of user clusters
C=5	#the number of item clusters
Ktrue=3
user.clustersize=n/B
item.clustersize=m/C
occup=rep(1:B,each=user.clustersize)	#Input: userID, Return: Occupation
genre=rep(1:C,each=item.clustersize)	#Input: itemID, Return: Genre
Bhat=B
Chat=C
S=1#Specify the number of replications
K=Ktrue
s=1
while(s<S+1){
set.seed(888+s)
P0=big.matrix(n/50,Ktrue)
P0[,]=matrix(rnorm(n/50*Ktrue,0,1),n/50,Ktrue)
P = big.matrix(n, Ktrue)
for (i in 1:n){
i0 = ceiling(i/50)
P[i,] = mvrnorm(n = 1 , mu=P0[i0,], Sigma=diag(Ktrue)/10, tol = 1e-6, empirical = FALSE)
} #weigthed Sigma=diag(Ktrue)/100 #weigthed1 Sigma=diag(Ktrue)/10
Q=big.matrix(m,Ktrue)
Q[,]=matrix(rnorm(m*Ktrue,0,1),m,Ktrue)
O=big.matrix(B,Ktrue)
O[,]=seq(-3,3,by=1.5)%*%t(rep(1,Ktrue))
G=big.matrix(C,Ktrue)
G[,]=seq(-3,3,by=1.5)%*%t(rep(1,Ktrue))
# # #
#generating missing pattern
J=n*m*0.2 #Specify (1-missing.rate)
full.data=NULL
full.data=foreach(j=1:J,.combine='cbind') %dopar%{
generate.rating.mcar(full.data,P,Q,O,G)
}
full.data=as.big.matrix(t(full.data))
colnames(full.data) = c('user_id', 'item_id', 'rating')
#full.data[, 3] = exp(-abs(full.data[, 3])) # for data2
save_path = paste('weighted1/full.data', 888+s,'.csv', sep='')
write.csv(full.data[], save_path, row.names=FALSE)
s = s+1
}
for (i in 1:1){
path = paste('weighted/full.data', 888+i,'.csv', sep='')
dt = read.csv(path, header=TRUE)
hist(dt$rating)
}
for (i in 1:1){
path = paste('weighted1/full.data', 888+i,'.csv', sep='')
dt = read.csv(path, header=TRUE)
hist(dt$rating)
}
setwd("~/Documents/Research/2020W/DeepRec-master/test/weighted")
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K3_n50_lr0.0005_reg1_u20.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.U_test_IAutoRec_filled_new_weighted_blank_h500_n50_lr0.005_r50_group.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K3_n50_lr0.0005_reg0.5_u20.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
#setwd("~/Documents/Research/2020W/DeepRec-master/test/sin")
rmse = read.csv('log.test.U_mf_group_weighted_K3_n50_lr0.0005_reg10_u20.txt', sep = " ", header=FALSE)
dim(rmse)
round(apply(rmse, 2, mean), 4)
round(apply(rmse,2, sd), 3)
for (i in 1:1){
path = paste('weighted/full.data', 888+i,'.csv', sep='')
dt = read.csv(path, header=TRUE)
hist(dt$rating)
}
setwd("~/Documents/Research/2020W/DeepRec-master/data/")
for (i in 1:1){
path = paste('weighted/full.data', 888+i,'.csv', sep='')
dt = read.csv(path, header=TRUE)
hist(dt$rating)
}
summary(dt)
